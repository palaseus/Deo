cmake_minimum_required(VERSION 3.20)
project(DeoBlockchain VERSION 2.0.0 LANGUAGES CXX)

# Set C++ standard
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Safe compiler options
if(MSVC)
    add_compile_options(/W4 /WX /permissive-)
else()
    # Enable all warnings and treat them as errors
    add_compile_options(-Wall -Wextra -Wpedantic -Werror)
    add_compile_options(-Wconversion -Wsign-conversion -Wcast-qual -Wcast-align)
    add_compile_options(-Wformat=2 -Wformat-security -Wformat-nonliteral)
    add_compile_options(-Wundef -Wshadow -Wredundant-decls -Wunused)
    add_compile_options(-Wmissing-include-dirs -Wmissing-declarations)
    add_compile_options(-Wstrict-overflow=5 -Warray-bounds=2)
    add_compile_options(-Wimplicit-fallthrough=5 -Wswitch-enum)
    add_compile_options(-Wuninitialized -Winit-self -Wmaybe-uninitialized)
    add_compile_options(-Wlogical-op -Wduplicated-cond -Wduplicated-branches)
    add_compile_options(-Wnull-dereference -Wdouble-promotion -Wfloat-equal)
    
    # Suppress OpenSSL 3.0 deprecation warnings
    add_compile_options(-Wno-deprecated-declarations)
    
    # Enable sanitizers for debug builds
    if(CMAKE_BUILD_TYPE STREQUAL "Debug" OR CMAKE_BUILD_TYPE STREQUAL "DebugSanitized")
        add_compile_options(-fsanitize=address -fsanitize=undefined -fsanitize=leak)
        add_compile_options(-fsanitize=thread -fsanitize=memory)
        add_compile_options(-fno-omit-frame-pointer -fno-optimize-sibling-calls)
        add_compile_options(-g -O1)
    endif()
    
    # Enable sanitizers for release builds with debug info
    if(CMAKE_BUILD_TYPE STREQUAL "ReleaseSanitized")
        add_compile_options(-fsanitize=address -fsanitize=undefined -fsanitize=leak)
        add_compile_options(-fsanitize=thread -fsanitize=memory)
        add_compile_options(-fno-omit-frame-pointer -fno-optimize-sibling-calls)
        add_compile_options(-g -O2)
    endif()
endif()

# Build type
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

# Output directories
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# Include directories
include_directories(include)

# Find required packages
find_package(Threads REQUIRED)
find_package(OpenSSL REQUIRED)

# LevelDB - use system package
find_library(LEVELDB_LIBRARY leveldb REQUIRED)
find_path(LEVELDB_INCLUDE_DIR leveldb/db.h REQUIRED)

# nlohmann/json
include(FetchContent)
FetchContent_Declare(
    nlohmann_json
    GIT_REPOSITORY https://github.com/nlohmann/json.git
    GIT_TAG        v3.11.2
)
FetchContent_MakeAvailable(nlohmann_json)

# Google Test
include(FetchContent)
FetchContent_Declare(
    googletest
    GIT_REPOSITORY https://github.com/google/googletest.git
    GIT_TAG        v1.14.0
)
FetchContent_MakeAvailable(googletest)

# uint256_t library
include(FetchContent)
FetchContent_Declare(
    uint256_t
    GIT_REPOSITORY https://github.com/calccrypto/uint256_t.git
    GIT_TAG        master
)
FetchContent_MakeAvailable(uint256_t)

# Source files
set(SOURCES
    src/main.cpp
    src/vm/virtual_machine.cpp
    src/vm/instruction_handlers.cpp
    src/vm/smart_contract_manager.cpp
    src/vm/vm_block_validator.cpp
    src/vm/determinism_tester.cpp
    src/vm/uint256.cpp
    src/core/blockchain.cpp
    src/core/block.cpp
    src/core/transaction.cpp
    src/core/transaction_receipt.cpp
    src/core/state_trie.cpp
    src/core/transaction_fees.cpp
    src/consensus/proof_of_work.cpp
    src/consensus/proof_of_authority.cpp
    src/consensus/proof_of_stake.cpp
    src/consensus/consensus_synchronizer.cpp
    src/network/network_messages.cpp
    src/network/tcp_network.cpp
    src/network/peer_connection_manager.cpp
    src/network/peer_authentication.cpp
    src/network/gossip_protocol.cpp
    src/network/transaction_mempool.cpp
    src/network/p2p_network_manager.cpp
    src/storage/leveldb_block_storage.cpp
    src/storage/leveldb_state_storage.cpp
    src/storage/block_pruning_manager.cpp
    src/storage/state_snapshot_manager.cpp
    src/sync/fast_sync_manager.cpp
    src/testing/scale_testing_framework.cpp
    src/testing/adversarial_testing_framework.cpp
    src/compiler/contract_compiler.cpp
    src/cli/commands.cpp
    src/cli/contract_cli.cpp
    src/api/json_rpc_server.cpp
    src/crypto/hash.cpp
    src/crypto/signature.cpp
    src/utils/logger.cpp
)

# Header files
set(HEADERS
    include/vm/virtual_machine.h
    include/vm/uint256.h
    include/vm/smart_contract_manager.h
    include/vm/vm_block_validator.h
    include/vm/determinism_tester.h
    include/core/blockchain.h
    include/core/block.h
    include/core/transaction.h
    include/core/transaction_receipt.h
    include/core/state_trie.h
    include/core/transaction_fees.h
    include/consensus/consensus_engine.h
    include/consensus/proof_of_work.h
    include/consensus/proof_of_authority.h
    include/consensus/proof_of_stake.h
    include/consensus/consensus_synchronizer.h
    include/network/network_messages.h
    include/network/tcp_network.h
    include/network/peer_connection_manager.h
    include/network/peer_authentication.h
    include/network/gossip_protocol.h
    include/network/transaction_mempool.h
    include/network/p2p_network_manager.h
    include/storage/block_storage.h
    include/storage/state_storage.h
    include/storage/leveldb_storage.h
    include/storage/block_pruning.h
    include/storage/state_snapshot.h
    include/sync/fast_sync.h
    include/testing/scale_testing.h
    include/testing/adversarial_testing.h
    include/compiler/contract_compiler.h
    include/cli/commands.h
    include/cli/contract_cli.h
    include/api/json_rpc_server.h
    include/crypto/hash.h
    include/crypto/signature.h
    include/crypto/key_pair.h
    include/crypto/openssl_compat.h
    include/utils/logger.h
)

# Create main executable
add_executable(${PROJECT_NAME} ${SOURCES} ${HEADERS})

# Link libraries
target_link_libraries(${PROJECT_NAME} 
    ${LEVELDB_LIBRARY}
    OpenSSL::SSL
    OpenSSL::Crypto
    Threads::Threads
    nlohmann_json::nlohmann_json
)

# Include directories for main executable
target_include_directories(${PROJECT_NAME} PRIVATE 
    ${LEVELDB_INCLUDE_DIR}
    include
)

# Test sources
set(TEST_SOURCES
    tests/vm/test_vm.cpp
    tests/vm/test_uint256.cpp
    tests/core/test_blockchain.cpp
    tests/core/test_block.cpp
    tests/core/test_transaction.cpp
    tests/core/test_transaction_receipt.cpp
    tests/core/test_state_trie.cpp
    tests/core/test_transaction_fees.cpp
    tests/consensus/test_proof_of_work.cpp
    tests/consensus/test_proof_of_authority.cpp
    tests/consensus/test_proof_of_stake.cpp
    tests/consensus/test_proof_of_stake_safe.cpp
    tests/consensus/test_consensus_synchronizer.cpp
    tests/network/test_network_messages.cpp
    tests/network/test_tcp_network.cpp
    tests/network/test_peer_connection_manager.cpp
    tests/network/test_peer_authentication.cpp
    tests/network/test_gossip_protocol.cpp
    tests/network/test_transaction_mempool.cpp
    tests/network/test_p2p_network_manager.cpp
    tests/network/test_peer_reputation.cpp
    tests/network/test_peer_reputation_simple.cpp
    tests/storage/test_leveldb_storage.cpp
    tests/storage/test_block_pruning.cpp
    tests/sync/test_fast_sync.cpp
    tests/testing/test_scale_testing.cpp
    tests/testing/test_adversarial_testing.cpp
    tests/compiler/test_contract_compiler.cpp
    tests/api/test_json_rpc_server.cpp
    tests/crypto/test_hash.cpp
    tests/crypto/test_signature.cpp
    tests/crypto/test_key_pair.cpp
)

# Create test executable
add_executable(${PROJECT_NAME}_tests ${TEST_SOURCES} ${SOURCES} ${HEADERS})

# Link libraries for tests
target_link_libraries(${PROJECT_NAME}_tests 
    ${LEVELDB_LIBRARY}
    OpenSSL::SSL
    OpenSSL::Crypto
    Threads::Threads
    nlohmann_json::nlohmann_json
    gtest_main
    gtest
)

# Include directories for tests
target_include_directories(${PROJECT_NAME}_tests PRIVATE 
    ${LEVELDB_INCLUDE_DIR}
    include
)

# Enable testing
enable_testing()

# Add test
add_test(NAME ${PROJECT_NAME}_tests COMMAND ${PROJECT_NAME}_tests)

# Set test properties
set_tests_properties(${PROJECT_NAME}_tests PROPERTIES
    TIMEOUT 300
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
)

# Custom targets for different build types
add_custom_target(debug_sanitized
    COMMAND ${CMAKE_COMMAND} -DCMAKE_BUILD_TYPE=DebugSanitized -B ${CMAKE_BINARY_DIR}/debug_sanitized -S ${CMAKE_SOURCE_DIR}
    COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR}/debug_sanitized --target ${PROJECT_NAME}_tests
    COMMENT "Building with debug sanitizers"
)

add_custom_target(release_sanitized
    COMMAND ${CMAKE_COMMAND} -DCMAKE_BUILD_TYPE=ReleaseSanitized -B ${CMAKE_BINARY_DIR}/release_sanitized -S ${CMAKE_SOURCE_DIR}
    COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR}/release_sanitized --target ${PROJECT_NAME}_tests
    COMMENT "Building with release sanitizers"
)

# Memory check target
add_custom_target(memory_check
    COMMAND valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all --track-origins=yes ./${PROJECT_NAME}_tests
    DEPENDS ${PROJECT_NAME}_tests
    COMMENT "Running memory check with Valgrind"
)

# Address sanitizer target
add_custom_target(address_sanitizer
    COMMAND ${CMAKE_COMMAND} -DCMAKE_BUILD_TYPE=DebugSanitized -B ${CMAKE_BINARY_DIR}/asan -S ${CMAKE_SOURCE_DIR}
    COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR}/asan --target ${PROJECT_NAME}_tests
    COMMAND LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libasan.so.6 ./${CMAKE_BINARY_DIR}/asan/bin/${PROJECT_NAME}_tests
    COMMENT "Running with AddressSanitizer"
)

# Thread sanitizer target
add_custom_target(thread_sanitizer
    COMMAND ${CMAKE_COMMAND} -DCMAKE_BUILD_TYPE=DebugSanitized -B ${CMAKE_BINARY_DIR}/tsan -S ${CMAKE_SOURCE_DIR}
    COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR}/tsan --target ${PROJECT_NAME}_tests
    COMMAND LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libtsan.so.0 ./${CMAKE_BINARY_DIR}/tsan/bin/${PROJECT_NAME}_tests
    COMMENT "Running with ThreadSanitizer"
)

# Install targets
install(TARGETS ${PROJECT_NAME} DESTINATION bin)
install(TARGETS ${PROJECT_NAME}_tests DESTINATION bin)
